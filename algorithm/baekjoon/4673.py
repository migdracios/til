# 셀프 넘버 알고리즘

'''
- 문제
---
셀프 넘버는 1949년 인도 수학자 D.R. Kaprekar가 이름 붙였다. 양의 정수 n에 대해서 d(n)을 n과 n의 각 자리수를 더하는 함수라고 정의하자. 예를 들어, d(75) = 75+7+5 = 87이다.

양의 정수 n이 주어졌을 때, 이 수를 시작해서 n, d(n), d(d(n)), d(d(d(n))), ...과 같은 무한 수열을 만들 수 있다. 

예를 들어, 33으로 시작한다면 다음 수는 33 + 3 + 3 = 39이고, 그 다음 수는 39 + 3 + 9 = 51, 다음 수는 51 + 5 + 1 = 57이다. 이런식으로 다음과 같은 수열을 만들 수 있다.

33, 39, 51, 57, 69, 84, 96, 111, 114, 120, 123, 129, 141, ...

n을 d(n)의 생성자라고 한다. 위의 수열에서 33은 39의 생성자이고, 39는 51의 생성자, 51은 57의 생성자이다. 생성자가 한 개보다 많은 경우도 있다. 예를 들어, 101은 생성자가 2개(91과 100) 있다. 

생성자가 없는 숫자를 셀프 넘버라고 한다. 100보다 작은 셀프 넘버는 총 13개가 있다. 1, 3, 5, 7, 9, 20, 31, 42, 53, 64, 75, 86, 97

10000보다 작거나 같은 셀프 넘버를 한 줄에 하나씩 출력하는 프로그램을 작성하시오.
---
- 입력 : 없음
- 출력
1
3
5
7
9
...
9993

'''

# 알고리즘 케이스 시도
'''
1. 생성자 값을 구해 print문으로 출력(X)
2. 1~10000까지의 리스트에서 생성자 값을 구해 하나씩 값을 빼내기(X)
3. 1~10000까지의 리스트에서 카프레카 함수를 구해 비교 후 삭제(X)
해설. 1~10000까지의 집합에서 카프레카 함수를 구해 집합-집합 차집합 연산
'''

# 알고리즘 설계
'''
1. 1부터 1만까지 값이 담긴 집합 선언
2. 카프레카 함수를 통해 담을 빈 집합 선언
3. 다중 for 문을 활용하여 카프레카 함수 연산
4. 계산된 값을 빈 집합에 add
5. (1부터 1만까지 집합) - (카프레카 함수 연산 결과 집합) 차집합 연산
6. for 문과 sorted 메서드로 정렬된 데이터를 반복문으로 print
'''

numbers = set(range(1, 10000))
remove_set = set()  # 함수연산 값을 담을 set
for num in numbers :
    for n in str(num):
        num += int(n)   # 850 : num(850) + n(8) + n(5) + n(0)
    remove_set.add(num)  # add: 집합에 요소를 추가할 때

self_numbers = numbers - remove_set  # set의 '-' 연산자로 차집합을 구함
for self_num in sorted(self_numbers):  # sorted 함수로 정렬
    print(self_num)

    
    
    
